
# ----------------------------------------------------------------------------
# Imports 
# ----------------------------------------------------------------------------
from ngram_preprocessor import NgramPreprocessor
from detector import MalwareDetector
from pe_header_preprocessor import PeHeaderPreprocessor
from apk_preprocessor import APKPreprocessor
import logging
import sys

# ----------------------------------------------------------------------------
# Globals
# ----------------------------------------------------------------------------

FEATURES_COUNT_NGRAM_MODEL = 230
FEATURES_COUNT_PE_HEADERS_MODEL = 110

FEATURES_COUNT_ANDROID_PERMISSIONS = 150


# ----------------------------------------------------------------------------
# Functions 
# ----------------------------------------------------------------------------

def setup_logger():
	logging.getLogger().setLevel(logging.ERROR)

	output_file_handler = logging.FileHandler("logs.log", 'w')
	stdout_handler = logging.StreamHandler(sys.stdout)
	
	formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(funcName)s - %(message)s",  datefmt='%d-%m-%Y- %H:%M:%S')
	output_file_handler.setFormatter(formatter)
	stdout_handler.setFormatter(formatter)

	logging.getLogger().addHandler(output_file_handler)
	logging.getLogger().addHandler(stdout_handler)



def main_ngram():
	DATASET_PATH = 'output-datasets\\dikes_dataset_ngram.csv'
	preprocessor = NgramPreprocessor(FEATURES_COUNT_NGRAM_MODEL)

	preprocessor.process_all_files_in_dir('in-files\\benign', 'out-files\\benign', 'exe')
	preprocessor.process_all_files_in_dir('in-files\\malwares', 'out-files\\malwares', 'exe')

	preprocessor.extract_most_common_sequences('out-files\\malwares', 'most_common_sequences.csv')
	preprocessor.create_dataset('most_common_sequences.csv', 'out-files\\benign', 'out-files\\malwares', DATASET_PATH)
	



def main_pe_headers():
	DATASET_PATH = 'output-datasets\\dike_dataset_pe_headers_110.csv'
	preprocessor = PeHeaderPreprocessor(FEATURES_COUNT_PE_HEADERS_MODEL)

	preprocessor.extract_most_common_api_functions_used('in-files\\test' , 'most_used_api_functions.csv')
	preprocessor.create_dataset('most_used_api_functions.csv', 'in-files\\test', 'in-files\\test2', DATASET_PATH)




def main_apks():
	DATASET_PATH = 'output-datasets\\TESTTTTTTTTTTTTT_Android.csv'

	preprocessor = APKPreprocessor(FEATURES_COUNT_ANDROID_PERMISSIONS, 'in-files\\Android\\Benign_PlayStore', 'in-files\\Android\\StormDroid_KuafuDet')
	preprocessor.create_dataset(DATASET_PATH);



def test_detector():

	apk_preprocessor = APKPreprocessor(FEATURES_COUNT_ANDROID_PERMISSIONS, 'in-files\\Android\\Benign_PlayStore', 'in-files\\Android\\StormDroid_KuafuDet')
	apk_permissions_data = (FEATURES_COUNT_ANDROID_PERMISSIONS, 'output-datasets\\apk_dataset_StormDroid_KuafuDet.csv', apk_preprocessor)

	detector = MalwareDetector(None, None, apk_permissions_data)

	result = detector.analyze_apk_file('in-files\\Android\\StormDroid_KuafuDet\\1.apk')
	print(f"File prediction is: {result} ")






def main():
	setup_logger()
	logging.getLogger().debug('START')

	main_apks()
	




if __name__ == '__main__':
	main()

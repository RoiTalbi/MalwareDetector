
# ----------------------------------------------------------------------------
# Imports 
# ----------------------------------------------------------------------------
from ngram_preprocessor import NgramPreprocessor
from pe_header_preprocessor import PeHeaderPreprocessor
from apk_preprocessor import APKPreprocessor
import logging
import sys

from detector import *

# ----------------------------------------------------------------------------
# Globals
# ----------------------------------------------------------------------------

FEATURES_COUNT_NGRAM_MODEL = 230
FEATURES_COUNT_PE_HEADERS_MODEL = 110

FEATURES_COUNT_ANDROID_PERMISSIONS = 150


# ----------------------------------------------------------------------------
# Functions 
# ----------------------------------------------------------------------------

def setup_logger():
	logging.getLogger().setLevel(logging.ERROR)

	output_file_handler = logging.FileHandler("logs.log", 'w')
	stdout_handler = logging.StreamHandler(sys.stdout)
	
	formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(funcName)s - %(message)s",  datefmt='%d-%m-%Y- %H:%M:%S')
	output_file_handler.setFormatter(formatter)
	stdout_handler.setFormatter(formatter)

	logging.getLogger().addHandler(output_file_handler)
	logging.getLogger().addHandler(stdout_handler)



def main_create_datasets():

	# NGRAM Dataset
	ngram_preprocessor = NgramPreprocessor(FEATURES_COUNT_NGRAM_MODEL, 'in-files\\benign2', 'in-files\\malwares2' , 'out-files\\benign','out-files\\malwares')
	ngram_preprocessor.create_dataset('output-datasets\\TEST__NgramDataset.csv')

	# PE Headers Dataset
	pe_header_preprocessor = PeHeaderPreprocessor(FEATURES_COUNT_PE_HEADERS_MODEL, 'in-files\\benign2' , 'in-files\\malwares2')
	pe_header_preprocessor.create_dataset('output-datasets\\TEST__PeHeadersDataset.csv')

	# APKs Dataset
	apk_preprocessor = APKPreprocessor(FEATURES_COUNT_ANDROID_PERMISSIONS, 'in-files\\Android\\benign','in-files\\Android\\StormDroid_KuafuDet')
	apk_preprocessor.create_dataset('output-datasets\\TEST__AndroidDataset.csv')



def test_detector():

	apk_preprocessor = APKPreprocessor(FEATURES_COUNT_ANDROID_PERMISSIONS, 'in-files\\Android\\benign','in-files\\Android\\StormDroid_KuafuDet', 'out-files\\android_permissions_StormDroid_KuafuDet.csv')
	apk_permissions_model_data = (FEATURES_COUNT_ANDROID_PERMISSIONS, 'output-datasets\\apk_dataset_StormDroid_KuafuDet.csv', apk_preprocessor)

	pe_header_preprocessor = PeHeaderPreprocessor(FEATURES_COUNT_PE_HEADERS_MODEL, 'in-files\\benign' , 'in-files\\malwares2', 'out-files\\most_used_api_functions_malicia.csv')
	pe_headers_model_data = (FEATURES_COUNT_PE_HEADERS_MODEL, 'output-datasets\\malicia_dataset_pe_headers.csv' , pe_header_preprocessor)


	ngram_preprocessor = NgramPreprocessor(FEATURES_COUNT_NGRAM_MODEL, 'in-files\\benign2', 'in-files\\malwares2' , 'out-files\\benign','out-files\\malwares' , 'out-files\\most_common_ngram_sequences_virusshare.csv')
	ngram_model_data = (FEATURES_COUNT_NGRAM_MODEL, 'output-datasets\\virusshare_dataset_ngram.csv', ngram_preprocessor)


	detector = MalwareDetector(ngram_model_data, pe_headers_model_data, apk_permissions_model_data)

	#result = detector.analyze_apk_file('in-files\\Android\\StormDroid_KuafuDet\\cc.apk')
	#result = detector.analyze_exe_file('in-files\\test\\blinds.exe', MODEL_PE_HEADER)

	result = detector.analyze_exe_file('in-files\\benign\\zip.exe', MODEL_NGRAM)
	print(f"File prediction is: {result} ")


def main():
	setup_logger()
	logging.getLogger().debug('START')

	main_create_datasets()
	




if __name__ == '__main__':
	main()

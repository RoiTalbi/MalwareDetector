
# ----------------------------------------------------------------------------
# Imports 
# ----------------------------------------------------------------------------
from ngram_preprocessor import NgramPreprocessor
from pe_header_preprocessor import PeHeaderPreprocessor
from apk_preprocessor import APKPreprocessor
import logging
import sys
import glob

from detector import *
from client_ui import *
from evaluator import *

# ----------------------------------------------------------------------------
# Globals
# ----------------------------------------------------------------------------

FEATURES_COUNT_NGRAM_MODEL = 230
FEATURES_COUNT_PE_HEADERS_MODEL = 110

FEATURES_COUNT_ANDROID_PERMISSIONS = 150




# ----------------------------------------------------------------------------
# Functions 
# ----------------------------------------------------------------------------

def setup_logger():
	logging.getLogger().setLevel(logging.ERROR)

	output_file_handler = logging.FileHandler("logs.log", 'w')
	stdout_handler = logging.StreamHandler(sys.stdout)
	
	formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(funcName)s - %(message)s",  datefmt='%d-%m-%Y- %H:%M:%S')
	output_file_handler.setFormatter(formatter)
	stdout_handler.setFormatter(formatter)

	logging.getLogger().addHandler(output_file_handler)
	logging.getLogger().addHandler(stdout_handler)




"""
	Example function for datasets creation 
"""
def main_create_datasets():

	# NGRAM Dataset
	ngram_preprocessor = NgramPreprocessor(FEATURES_COUNT_NGRAM_MODEL, 'in-files\\benign2', 'in-files\\Virusshare_Dataset' , 'out-files\\benign','out-files\\malwares')
	ngram_preprocessor.create_dataset('output-datasets\\virusshare_dataset_ngram.csv')

	# PE Headers Dataset
	pe_header_preprocessor = PeHeaderPreprocessor(FEATURES_COUNT_PE_HEADERS_MODEL, 'in-files\\benign' , 'in-files\\Virusshare_Dataset')
	pe_header_preprocessor.create_dataset('output-datasets\\virusshare_dataset_pe_headers.csv')

	# APKs Dataset
	apk_preprocessor = APKPreprocessor(FEATURES_COUNT_ANDROID_PERMISSIONS, 'in-files\\Android\\benign','in-files\\Android\\StormDroid_KuafuDet')
	apk_preprocessor.create_dataset('output-datasets\\StormDroid_KuafuDet_apk_dataset.csv')




"""
	Example function for malware detector usage 
"""
def main_detector_usage_example():

	# Setup malware detectors for both dataset preset 1 
	apk_preprocessor = APKPreprocessor(FEATURES_COUNT_ANDROID_PERMISSIONS, 'in-files\\Android\\benign','in-files\\Android\\StormDroid_KuafuDet', 'out-files\\android_permissions_StormDroid_KuafuDet.csv')
	apk_permissions_model_data = (FEATURES_COUNT_ANDROID_PERMISSIONS, 'output-datasets\\StormDroid_KuafuDet_apk_dataset.csv', apk_preprocessor)

	pe_header_preprocessor = PeHeaderPreprocessor(FEATURES_COUNT_PE_HEADERS_MODEL, 'in-files\\benign' , 'in-files\\Virusshare_Dataset', 'out-files\\most_used_api_functions_virusshare.csv')
	pe_headers_model_data = (FEATURES_COUNT_PE_HEADERS_MODEL, 'output-datasets\\virusshare_dataset_pe_headers.csv' , pe_header_preprocessor)

	ngram_preprocessor = NgramPreprocessor(FEATURES_COUNT_NGRAM_MODEL, 'in-files\\benign', 'in-files\\Virusshare_Dataset' , 'out-files\\benign','out-files\\malwares' , 'out-files\\most_common_ngram_sequences_virusshare.csv')
	ngram_model_data = (FEATURES_COUNT_NGRAM_MODEL, 'output-datasets\\virusshare_dataset_ngram.csv', ngram_preprocessor)

	detector = MalwareDetector(ngram_model_data, pe_headers_model_data, apk_permissions_model_data)


	result = detector.analyze_file('in-files\\benign\\explorer.exe', MODEL_PE_HEADER)
	print(f"File {filepath} prediction is: {result} ")




"""
	Example function for evaluating datasets
"""
def main_evaluate_datasets():

	# Evaluate datasets of preset 1
	Evaluator.evaluate_dataset_all_classifiers('output-datasets\\virusshare_dataset_ngram.csv', FEATURES_COUNT_NGRAM_MODEL)
	Evaluator.evaluate_dataset_all_classifiers('output-datasets\\virusshare_dataset_pe_headers.csv', FEATURES_COUNT_PE_HEADERS_MODEL)
	Evaluator.evaluate_dataset_all_classifiers('output-datasets\\StormDroid_KuafuDet_apk_dataset.csv', FEATURES_COUNT_ANDROID_PERMISSIONS)

	# Evaluate datasets of preset 2
	Evaluator.evaluate_dataset_all_classifiers('output-datasets\\malicia_dataset_ngram.csv', FEATURES_COUNT_NGRAM_MODEL)
	Evaluator.evaluate_dataset_all_classifiers('output-datasets\\malicia_dataset_pe_headers.csv', FEATURES_COUNT_PE_HEADERS_MODEL)
	Evaluator.evaluate_dataset_all_classifiers('output-datasets\\MalDroid_apk_dataset.csv', FEATURES_COUNT_ANDROID_PERMISSIONS)





"""
	Main Function - Initialize Malawre Detectors for both dataset presets and run UI 

"""
def main_init_malware_detectors_run_UI():
	setup_logger()
	logging.getLogger().debug('START')


	main_evaluate_datasets()
	return;

	# Setup malware detectors for both dataset preset 1 
	apk_preprocessor = APKPreprocessor(FEATURES_COUNT_ANDROID_PERMISSIONS, 'in-files\\Android\\benign','in-files\\Android\\StormDroid_KuafuDet', 'out-files\\android_permissions_StormDroid_KuafuDet.csv')
	apk_permissions_model_data = (FEATURES_COUNT_ANDROID_PERMISSIONS, 'output-datasets\\StormDroid_KuafuDet_apk_dataset.csv', apk_preprocessor)

	pe_header_preprocessor = PeHeaderPreprocessor(FEATURES_COUNT_PE_HEADERS_MODEL, 'in-files\\benign' , 'in-files\\Virusshare_Dataset', 'out-files\\most_used_api_functions_virusshare.csv')
	pe_headers_model_data = (FEATURES_COUNT_PE_HEADERS_MODEL, 'output-datasets\\virusshare_dataset_pe_headers.csv' , pe_header_preprocessor)

	ngram_preprocessor = NgramPreprocessor(FEATURES_COUNT_NGRAM_MODEL, 'in-files\\benign', 'in-files\\Virusshare_Dataset' , 'out-files\\benign','out-files\\malwares' , 'out-files\\most_common_ngram_sequences_virusshare.csv')
	ngram_model_data = (FEATURES_COUNT_NGRAM_MODEL, 'output-datasets\\virusshare_dataset_ngram.csv', ngram_preprocessor)

	detector_preset_1 = MalwareDetector(ngram_model_data, pe_headers_model_data, apk_permissions_model_data)


	# Setup malware detectors for both dataset preset 2
	apk_preprocessor2 = APKPreprocessor(FEATURES_COUNT_ANDROID_PERMISSIONS, 'in-files\\Android\\benign','in-files\\Android\\MalDroid', 'out-files\\android_permissions_MalDroid.csv')
	apk_permissions_model_data2 = (FEATURES_COUNT_ANDROID_PERMISSIONS, 'output-datasets\\MalDroid_apk_dataset.csv', apk_preprocessor2)

	pe_header_preprocessor2 = PeHeaderPreprocessor(FEATURES_COUNT_PE_HEADERS_MODEL, 'in-files\\benign' , 'in-files\\Malicia_Dataset', 'out-files\\most_used_api_functions_malicia.csv')
	pe_headers_model_data2 = (FEATURES_COUNT_PE_HEADERS_MODEL, 'output-datasets\\malicia_dataset_pe_headers.csv' , pe_header_preprocessor2)

	ngram_preprocessor2 = NgramPreprocessor(FEATURES_COUNT_NGRAM_MODEL, 'in-files\\benign', 'in-files\\Malicia_Dataset' , 'out-files\\benign','out-files\\malwares' , 'out-files\\most_common_ngram_sequences_malicia.csv')
	ngram_model_data2 = (FEATURES_COUNT_NGRAM_MODEL, 'output-datasets\\malicia_dataset_ngram.csv', ngram_preprocessor2)

	detector_preset_2 = MalwareDetector(ngram_model_data2, pe_headers_model_data2, apk_permissions_model_data2)


	# Init and run User Interface!
	ClientUI.init(detector_preset_1, detector_preset_2)
	ClientUI.run_ui()
	







"""
	Main Function - Initialize Malawre Detectors for both dataset presets and run UI 

"""

def main():
	setup_logger()

	main_init_malware_detectors_run_UI()









if __name__ == '__main__':
	main()

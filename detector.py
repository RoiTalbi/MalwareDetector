
# ----------------------------------------------------------------------------
# Imports 
# ----------------------------------------------------------------------------
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import LinearSVC
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import f1_score
from sklearn.metrics import accuracy_score




# ----------------------------------------------------------------------------
# Modules 
# ----------------------------------------------------------------------------

class MalwareDetector():
    def __init__(self, features_count):
        self._features_count = features_count
        pass


    def test_train_dataset(self, dataset_file_path, model):
        dataset = np.genfromtxt(dataset_file_path, delimiter=',')

        data = dataset[:,0:self._features_count]
        labels = dataset[:, self._features_count]

        x_train, x_test, y_train, y_test = train_test_split(data, labels, test_size=0.4) # random_state=0

        if model == 'KNN':
            classifier = KNeighborsClassifier(n_neighbors=55, p=2,metric='euclidean')

        elif model == 'RF':
            classifier = RandomForestClassifier(n_jobs=2)  #random_state=0)

        elif model == 'SVM':
            classifier = LinearSVC()

        elif model == 'LR':
            classifier = LogisticRegression()

        print(f"Evaluation dataset using {model} model")


        classifier.fit(x_train, y_train)
        y_pred = classifier.predict(x_test)

        print(f"F1 = {f1_score(y_test, y_pred)}")
        print(f"Accuracy Score = {accuracy_score(y_test, y_pred)}")


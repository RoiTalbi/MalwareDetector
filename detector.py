
# ----------------------------------------------------------------------------
# Imports 
# ----------------------------------------------------------------------------
import numpy as np
import logging
import os

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import LinearSVC
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import f1_score
from sklearn.metrics import accuracy_score
from sklearn.model_selection import cross_val_score


from predictor import *
from md_exception import *

# ----------------------------------------------------------------------------
# Globals
# ----------------------------------------------------------------------------

MODEL_PE_HEADER = 1
MODEL_NGRAM = 2
MODEL_APK_PERMISSIONS = 4


# ----------------------------------------------------------------------------
# Modules 
# ----------------------------------------------------------------------------




class MalwareDetector():

    # ------------------------------
    # Module logic
    # ------------------------------

    """

    Initialize MalwareDetector for 3 supported models: {ngram, pe_headers, android_permission}
    Each model data is tuple of the structure:  
                                               (features_count, dataset_file_path, initizlied_preprocessor_object)
    """

    def __init__(self, ngram_model_data, pe_headers_model_data, android_permission_model_data):

        self._apk_predictor = Predictor(android_permission_model_data[0] , android_permission_model_data[1])
        self._apk_preprocessor = android_permission_model_data[2]

        self._exe_predictor_headers = Predictor(pe_headers_model_data[0] , pe_headers_model_data[1])
        self._pe_headers_preprocessor = pe_headers_model_data[2]

        self._exe_predictor_ngram = Predictor(ngram_model_data[0] , ngram_model_data[1])
        self._ngram_preprocessor = ngram_model_data[2]


    def analyze_file(self, file_path, model=0):

        if file_path.lower().endswith('apk'):
            return self.analyze_apk_file(file_path)

        elif file_path.lower().endswith('exe'):
            return self.analyze_exe_file(file_path, model)

        else:
            raise MalwareDetectorException("Unsupported file extention")


    def analyze_apk_file(self, file_path):

        if not os.path.exists(file_path):
            logging.getLogger().error('Invalid File Path!')
            return;

        feature_vector = self._apk_preprocessor.get_feature_vector(file_path)
        if feature_vector is None:
            raise MalwareDetectorException("Invalid APK File")

        result = self._apk_predictor.predict(feature_vector)
        return result
        


    def analyze_exe_file(self, file_path, model):

        if not os.path.exists(file_path):
            logging.getLogger().error('Invalid File Path!')
            return;

        # PE Headers Model
        if model == MODEL_PE_HEADER:
            feature_vector = self._pe_headers_preprocessor.get_feature_vector(file_path)
            if feature_vector is None:
                raise MalwareDetectorException("Invalid EXE File")

            result = self._exe_predictor_headers.predict(feature_vector)

        # NGRAM Model
        elif model == MODEL_NGRAM:
            feature_vector = self._ngram_preprocessor.get_feature_vector(file_path)
            if feature_vector is None:
                raise MalwareDetectorException("Invalid EXE File")

            result = self._exe_predictor_ngram.predict(feature_vector)

        else:
            raise MalwareDetectorException("Unsupported Model")


        return result




# ----------------------------------------------------------------------------
# Imports 
# ----------------------------------------------------------------------------
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import LinearSVC
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import f1_score
from sklearn.metrics import accuracy_score
from sklearn.model_selection import cross_val_score


from md_exception import *

# ----------------------------------------------------------------------------
# Globals
# ----------------------------------------------------------------------------






# ----------------------------------------------------------------------------
# Modules 
# ----------------------------------------------------------------------------


class Predictor():

	def __init__(self, features_count, dataset_file_path):
		self.features_count = features_count
		self.dataset = np.genfromtxt(dataset_file_path, delimiter=',')
		self.initialize_classifiers()


	def initialize_classifiers(self):
		data = dataset[:,0: self.features_count]
        labels = dataset[:, self.features_count]

        knn_classifier = KNeighborsClassifier(n_neighbors=55, p=2,metric='euclidean')
        rf_classifier = RandomForestClassifier(n_jobs=2)
        svm_classifier = LinearSVC()
        lr_classifier = LogisticRegression()

        self.classifiers = [knn_classifier, rf_classifier, svm_classifier, lr_classifier]


	def predict(self, feature_vector):

		if len(feature_vector) != self.features_count:
			raise MalwareDetectorException('Invalid feature vector!')

		predictions = []

		for classifier in self.classifiers:
			result = classifier.predict(feature_vector)

			predictions.append(result)


		# DEBUG 
		print(f"[DEBUG]    Pretictions array ===========>   {predictions}")

		predictions = np.array(predictions)
		occurances = np.bincount(predictions)

		# Final prediction in the majority decision (lebel benign or malicious)
		final_prediction = np.argmax(occurances)
		return final_prediction











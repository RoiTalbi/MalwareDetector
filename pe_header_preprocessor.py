
import pefile
import numpy as np
import glob
import logging

class PeHeaderPreprocessor():

    def __init__(self):
        pass

    def extract_api_calls_vector(self, filepath):
        try:
            pe = pefile.PE(filepath)

            api_functions_vector = []

            for entry in pe.DIRECTORY_ENTRY_IMPORT:
                dll_entry_functions = [func.name.decode('utf-8') for func in entry.imports if func.name]
                api_functions_vector += (dll_entry_functions)

            #api_functions_vector = np.array(api_functions_vector)
            #np.savetxt('api_functions_vector_example.csv' , api_functions_vector.reshape(1, api_functions_vector.shape[0]) , fmt='%s', delimiter=',')
            #print(api_functions_vector.shape)

            return api_functions_vector

        except Exception as ex:
            logging.getLogger().error(str(ex))
            return []

            

    def extract_most_common_api_functions_used(self, in_directory_path, out_filepath):

        all_functions_dict = {}

        for filepath in glob.iglob(f'{in_directory_path}/*.exe'):

            print('Processing: ' + filepath)
            api_functions_vector = self.extract_api_calls_vector(filepath)

            for function_name in api_functions_vector:

                if not function_name in all_functions_dict:
                    all_functions_dict[function_name] = 1

                else:
                    all_functions_dict[function_name] = all_functions_dict[function_name] + 1


        # Now export that dictionary to csv file
        api_functions_counts_arr = [(func, count) for func, count in all_functions_dict.items()]
        api_functions_counts_arr = np.array(api_functions_counts_arr)

        CSV_FILE_HEADER = 'FUNCTION, COUNT'
        np.savetxt(out_filepath, api_functions_counts_arr , fmt='%s', delimiter=',', header=CSV_FILE_HEADER)



    def debug__analyze_file(self, filepath):
        pe = pefile.PE(filepath)
        print(f"[*] Listing imported DLLs of file:   {filepath} ")

        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            print('----------------------------------------------------------------------------')
            print('\t' + entry.dll.decode('utf-8'))
            print('\n')

            for func in entry.imports:
                if func.name:
                    print(func.name.decode('utf-8'))
                #print("\t%s at 0x%08x" % (func.name.decode('utf-8'), func.address))
                



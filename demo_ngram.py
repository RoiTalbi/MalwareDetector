import numpy as np
from nltk import ngrams
import torch 


def timeit(method):
    def timed(*args, **kw):
        import time
        ts = time.time()
        result = method(*args, **kw)
        te = time.time()
        print(f"Function {method.__name__} Execution took: {(te - ts)} Seconds")

        return result
    return timed




def export_to_csv(outfile_path, sequences_mat, sequence_freqs):
	# concatanete frequencies array to be the last column of the sequenes matrix
	sequence_freqs = sequence_freqs.reshape(len(sequence_freqs), 1)
	result_matrix = np.concatenate((sequences_mat, sequence_freqs), axis=1)

	CSV_FILE_HEADER = 'OPCODE1, OPCODE2, FREQUENCY'
	np.savetxt(outfile_path, result_matrix, fmt="%x,%x,%d" ,delimiter=',', header=CSV_FILE_HEADER)




@timeit
def calc_hist_pure_python(twogram_array):
	hist = [((hex(seq[0]),hex(seq[1])), twogram.count(seq)) for seq in unique_sequences[:HISTOGRAM_SIZE]]
	return hist

@timeit
def calc_hist_numpy(twogram_array):
	unique_sequences, sequence_freqs = np.unique(twogram_array, axis=0, return_counts=True)
	return (unique_sequences, sequence_freqs)


@timeit
def calc_hist_gpu_accelerated(twogram_array):
	device_gpu = torch.device("cuda:0")

	# convert array to tensor object and copy to GPU memory 
	twogram_tensor = torch.from_numpy(twogram_array)
	twogram_tensor = twogram_tensor.to(device_gpu)

	unique_sequences, sequence_freqs = torch.unique(twogram_tensor,  return_counts=True, dim=0)

	# Move tensor back to CPU memory, as numpy arrays
	unique_sequences = unique_sequences.detach().cpu().numpy()
	sequence_freqs = sequence_freqs.detach().cpu().numpy()

	return (unique_sequences, sequence_freqs)


def cleanup_reasources():
	torch.cuda.empty_cache()


def create_histogram(in_file_path, out_file_path = 'out.csv'):

	infile = open(in_file_path, 'rb')

	data = infile.read()
	twogram_iter = ngrams(data, 2)

	twogram_array = np.array(list(twogram_iter), dtype=np.uint8)

	# TODO ----------- DIFFER BETWEEEN BIG/SMALL FILES AND CLEAN GPU MEM ON 70% !!!!!!@@@@@@@@@@@@@@
	unique_sequences, sequence_freqs = calc_hist_gpu_accelerated(twogram_array)
	calc_hist_numpy(twogram_array)

	print(unique_sequences)
	print(sequence_freqs)

	export_to_csv(out_file_path, unique_sequences, sequence_freqs)

	infile.close()


def main():
	create_histogram('calc.exe')
	cleanup_reasources()


if __name__ == '__main__':
	main()
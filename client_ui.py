
# ----------------------------------------------------------------------------
# Imports 
# ----------------------------------------------------------------------------

import numpy as np
import os
import logging
import tkinter as tk
from tkinter import *
from tkinter import ttk
from tkinter import filedialog as fd
from PIL import Image, ImageTk
import time

from md_exception import *
from preprocessor import Preprocessor
from utils import *
from common import *



# ----------------------------------------------------------------------------
# Globals and constants
# ----------------------------------------------------------------------------

MODELS = ['APK- Permissions model', 'EXE- PE Headers Model', 'EXE- NGRAM Model']

DATASET_PRESETS = ['Dataset Preset 1' , 'Dataset Preset 2'] 

# ----------------------------------------------------------------------------
# Classes 
# ----------------------------------------------------------------------------

class ClientUI:
	
	def init_ui():
		pass

	def run_ui():

		
		root = Tk()
		ClientUI.root = root


		root.title('Malware Detector')

		root.resizable(False, False)
		root.geometry('1200x800')
		#root.minsize(width=1200, height=800)


		#main_frame = ttk.Frame(root, padding=10)
		#ClientUI.main_frame = main_frame

		md_label = tk.Label(root, text="Malware Detector" , font=("Arial", 40)).place(relx = 0.5,rely = 0.05, anchor ='center')

		results_label = tk.Label(root, text="Results: " , font=("Arial", 20))
		results_label.place(relx = 0.5,rely = 0.2, anchor ='center')
		ClientUI.results_label = results_label

		ClientUI.log_label = tk.Label(root, text=" " , fg='gray', font=("Arial", 12))
		ClientUI.log_label.place(relx = 0.05,rely = 1.0, anchor ='sw')


		close_btn = tk.Button(root, text="Exit", bg='#ff6969', command= ClientUI.close)
		close_btn.grid(column=0, row=0)
		close_btn.place(relx = 0.99,rely = 0.01, anchor ='ne')


		image = Image.open('logo.png')
		image = image.resize((400,400))
		logo = ImageTk.PhotoImage(image)
		logo_label = Label(root, image=logo)
		logo_label.grid(row=10, column=10)
		logo_label.place(relx = 0.98,rely = 0.98, anchor ='se')



		tk.Label(root, text="Actions", font=("Arial", 10)).place(relx = 0.1,rely = 0.35, anchor ='nw')
		select_file_btn = tk.Button(root, text='Select a file', bg='#b3f0fc', fg='black', width = 24, height=6, command=ClientUI.select_file)
		select_file_btn.grid()
		select_file_btn.place(relx = 0.05,rely = 0.4, anchor ='nw')


		send_file_btn = tk.Button(root, text='Send file to analysis', bg='#b0f7d9', fg='black', width = 24, height=6, command=ClientUI.start_analyzing)
		send_file_btn.grid() 
		send_file_btn.place(relx = 0.05,rely = 0.55, anchor ='nw')



		
		tk.Label(root, text="Options", font=("Arial", 10)).place(relx = 0.4 ,rely = 0.35, anchor ='nw')
		ClientUI.model_choice = StringVar(root)
		models_dropdown = ttk.OptionMenu( root ,  ClientUI.model_choice , MODELS[0], *MODELS )
		models_dropdown.grid()
		models_dropdown.place(relx = 0.35,rely = 0.4, anchor ='nw')


		ClientUI.preset_choine = StringVar(root)
		models_dropdown = ttk.OptionMenu( root ,  ClientUI.preset_choine , DATASET_PRESETS[0], *DATASET_PRESETS )
		models_dropdown.grid()
		models_dropdown.place(relx = 0.35,rely = 0.5, anchor ='nw')
		

		root.mainloop()



	def close():
		print('Closing')
		ClientUI.root.destroy()



	def start_analyzing():
		ClientUI.results_label.config(text='Loading...', fg='black')
		ClientUI.root.after(1000, ClientUI.send_to_analysis)


	def send_to_analysis():

		print(ClientUI.model_choice.get())

		# Send to analysis using malware detector 

		# Present the results
		ClientUI.show_analysis_results(LABEL_BENIGN)
		


	def show_analysis_results(analysis_result):

		if analysis_result == LABEL_BENIGN:
			ClientUI.results_label.config(text = 'File has been analyzed as benign file', fg='green') 

		elif analysis_result == LABEL_MALICIOUS:
			ClientUI.results_label.config(text = 'File has been analyzed as malware!!', fg='red')



	def select_file():
		print('File SELECTION!')

		filepath = fd.askopenfilename(
		title='Open a file',
		initialdir='/',
		filetypes=(('EXE files', '*.exe'), ('APK files', '*.apk')))

		print(f' File: {os.path.basename(filepath)} has been sent to analysis')




	def present_error(message):
		ClientUI.log_label.config(text=message) 

# ----------------------------------------------------------------------------
# Imports 
# ----------------------------------------------------------------------------

import numpy as np
import os
import logging
import tkinter as tk
from tkinter import *
from tkinter import ttk
from tkinter import filedialog as fd
from PIL import Image, ImageTk
import time

from md_exception import *
from preprocessor import Preprocessor
from utils import *
from common import *
from detector import *


# ----------------------------------------------------------------------------
# Globals and constants
# ----------------------------------------------------------------------------

MODELS = ['EXE- PE Headers Model', 'EXE- NGRAM Model' , 'APK- Permissions model']

MODEL_NAME_TO_INDEX_DICT = {'APK- Permissions model':MODEL_APK_PERMISSIONS, 'EXE- PE Headers Model':MODEL_PE_HEADER, 'EXE- NGRAM Model':MODEL_NGRAM }

DATASET_PRESETS = ['Dataset Preset 1' , 'Dataset Preset 2'] 



# ----------------------------------------------------------------------------
# Classes 
# ----------------------------------------------------------------------------

class ClientUI:
	
	def init(malware_detector_preset_1, malware_detector_preset_2):
		ClientUI.current_file_path = ""
		
		ClientUI.malware_detector_preset_1 = malware_detector_preset_1
		ClientUI.malware_detector_preset_2 = malware_detector_preset_2


	def run_ui():

		
		root = Tk()
		ClientUI.root = root


		root.title('Malware Detector')

		root.resizable(False, False)
		root.geometry('1200x800')
		#root.minsize(width=1200, height=800)


		#main_frame = ttk.Frame(root, padding=10)
		#ClientUI.main_frame = main_frame

		md_label = tk.Label(root, text="Malware Detector" , font=("Arial", 40)).place(relx = 0.5,rely = 0.05, anchor ='center')

		results_label = tk.Label(root, text="Results: " , font=("Arial", 20))
		results_label.place(relx = 0.5,rely = 0.2, anchor ='center')
		ClientUI.results_label = results_label

		ClientUI.current_file_label = tk.Label(root, text="File: ", fg='gray', font=("Arial", 10))
		ClientUI.current_file_label.place(relx = 0.1,rely = 0.2, anchor ='center')

		ClientUI.log_label = tk.Label(root, text=" " , fg='red', font=("Arial", 14))
		ClientUI.log_label.place(relx = 0.05,rely = 1.0, anchor ='sw')


		close_btn = tk.Button(root, text="Exit", bg='#ff6969', command= ClientUI.close)
		close_btn.grid(column=0, row=0)
		close_btn.place(relx = 0.99,rely = 0.01, anchor ='ne')


		image = Image.open('logo.png')
		image = image.resize((400,400))
		logo = ImageTk.PhotoImage(image)
		logo_label = Label(root, image=logo)
		logo_label.grid(row=10, column=10)
		logo_label.place(relx = 0.98,rely = 0.98, anchor ='se')



		tk.Label(root, text="Actions", font=("Arial", 10)).place(relx = 0.1,rely = 0.35, anchor ='nw')
		select_file_btn = tk.Button(root, text='Select a file', bg='#b3f0fc', fg='black', width = 24, height=6, command=ClientUI.select_file)
		select_file_btn.grid()
		select_file_btn.place(relx = 0.05,rely = 0.4, anchor ='nw')


		send_file_btn = tk.Button(root, text='Send file to analysis', bg='#b0f7d9', fg='black', width = 24, height=6, command=ClientUI.start_analyzing)
		send_file_btn.grid() 
		send_file_btn.place(relx = 0.05,rely = 0.55, anchor ='nw')

		
		tk.Label(root, text="Options", font=("Arial", 10)).place(relx = 0.4 ,rely = 0.35, anchor ='nw')
		ClientUI.model_choice = StringVar(root)
		models_dropdown = ttk.OptionMenu( root ,  ClientUI.model_choice , MODELS[0], *MODELS )
		models_dropdown.grid()
		models_dropdown.place(relx = 0.35,rely = 0.4, anchor ='nw')


		ClientUI.preset_choine = StringVar(root)
		presets_dropdown = ttk.OptionMenu( root ,  ClientUI.preset_choine , DATASET_PRESETS[0], *DATASET_PRESETS )
		presets_dropdown.grid()
		presets_dropdown.place(relx = 0.35,rely = 0.5, anchor ='nw')
		

		root.mainloop()



	def close():
		print('Closing')
		ClientUI.root.destroy()



	def start_analyzing():
		ClientUI.results_label.config(text='Loading...', fg='black')
		ClientUI.root.after(1000, ClientUI.send_to_analysis)


	def send_to_analysis():

		# Validate file has been chosen
		if not ClientUI.current_file_path:
			ClientUI.present_error('Must choose a valid file')
			return;

		# Validate preset and model choice
		model_index = MODEL_NAME_TO_INDEX_DICT[ClientUI.model_choice.get()]

		if ClientUI.current_file_path.lower().endswith('.apk') and not model_index == MODEL_APK_PERMISSIONS:
			ClientUI.present_error('Invalid model chosen for APK file')
			return;

		if ClientUI.current_file_path.lower().endswith('.exe') and not (model_index != MODEL_NGRAM or model_index != MODEL_PE_HEADER):
			print(f'Model index {model_index}' )
			ClientUI.present_error('Invalid model chosen for EXE file')
			return;

		if ClientUI.preset_choine.get() == DATASET_PRESETS[0]:
			print('Preset 1!')
			detector = ClientUI.malware_detector_preset_1
		else:
			print('Preset 2!')
			detector = ClientUI.malware_detector_preset_2

		print('Now Analyzing file: ' + ClientUI.current_file_path)

		# Send to analysis using malware detector 
		try:
			result = detector.analyze_file(ClientUI.current_file_path, model_index)

		except MalwareDetectorException as ex:
			ClientUI.present_error(str(ex))
			return;

		except Exception as ex:
			ClientUI.present_error('Unknown Error: ' + str(ex))
			return;

		print('Result is: ' + str(result))

		# Present the results
		ClientUI.show_analysis_results(result)
		


	def show_analysis_results(analysis_result):

		if analysis_result == LABEL_BENIGN:
			ClientUI.results_label.config(text = 'File has been analyzed as benign file', fg='green') 

		elif analysis_result == LABEL_MALICIOUS:
			ClientUI.results_label.config(text = 'File has been analyzed as malware!!', fg='red')



	def select_file():

		# Ask user to choose a file. save that file path and present it's name on the matching label
		filepath = fd.askopenfilename(title='Open a file', initialdir='/', filetypes=(('EXE files', '*.exe'), ('APK files', '*.apk')))

		ClientUI.current_file_label.config(text=f'File: {os.path.basename(filepath)}')
		ClientUI.current_file_path = filepath



	def present_error(message):
		ClientUI.log_label.config(text=message)
		ClientUI.root.after(3500, ClientUI.clear_error_message)

	def clear_error_message():
		ClientUI.log_label.config(text='') 